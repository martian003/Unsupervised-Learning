# -*- coding: utf-8 -*-
"""dbscan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e_MgD7WamyWZq9UtR85lG-WDFM4Kdb1l
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import DBSCAN
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('Mall_Customers (1).csv')

df.head()

data = df[['Age','Annual Income (k$)']].values

scaler = StandardScaler()
data_scaled = scaler.fit_transform(data)

dbscan = DBSCAN(eps=3,min_samples=4,metric='euclidean')
clusters = dbscan.fit_predict(data_scaled)

df['cluster'] = clusters

print("Unique clusters:", np.unique(clusters))

# Ensure clusters array length matches dataset length
if len(clusters) == len(df):
    df['Cluster'] = clusters
    print("Clusters assigned successfully.")
else:
    print("Error: Cluster labels do not match dataset length!")

# Display the first few rows to confirm
print(df.head())

plt.figure(figsize=(8, 6))
unique_clusters = np.unique(clusters)

for cluster in unique_clusters:
    cluster_points = data_scaled[clusters == cluster]
    plt.scatter(cluster_points[:, 0], cluster_points[:, 1], label=f"Cluster {cluster}")

plt.xlabel("Normalized Age")
plt.ylabel("Normalized Annual Income")
plt.title("DBScan Clustering (eps=3, min_samples=4)")
plt.legend()
plt.show()

